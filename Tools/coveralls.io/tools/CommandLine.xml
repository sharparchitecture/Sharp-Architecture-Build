<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommandLine</name>
    </assembly>
    <members>
        <member name="T:CommandLine.NameInfo">
            <summary>
            Models name information, used in <see cref="T:CommandLine.Error"/> instances.
            </summary>
        </member>
        <member name="F:CommandLine.NameInfo.EmptyName">
            <summary>
            Represents an empty name information. Used when <see cref="T:CommandLine.Error"/> are tied to values,
            rather than options.
            </summary>
        </member>
        <member name="M:CommandLine.NameInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.NameInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.NameInfo.Equals(CommandLine.NameInfo)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.NameInfo"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.NameInfo"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.NameInfo"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="P:CommandLine.NameInfo.ShortName">
            <summary>
            Gets the short name of the name information.
            </summary>
        </member>
        <member name="P:CommandLine.NameInfo.LongName">
            <summary>
            Gets the long name of the name information.
            </summary>
        </member>
        <member name="P:CommandLine.NameInfo.NameText">
            <summary>
            Gets a formatted text with unified name information.
            </summary>
        </member>
        <member name="T:CommandLine.NullInstance">
            <summary>
            Models a null result when constructing a <see cref="T:CommandLine.ParserResult`1"/> in a faling verbs scenario.
            </summary>
        </member>
        <member name="T:CommandLine.Infrastructure.Maybe`1">
            <summary>
            C# implementation of F# 'T option. Based on the one found in http://goo.gl/jMwzg.
            Here Haskell naming is used, to not create confusion with local option concept.
            </summary>
        </member>
        <member name="M:CommandLine.Infrastructure.MaybeExtensions.ToMaybe``1(``0)">
            <summary>
            Equivalent to Unit operation.
            </summary>
        </member>
        <member name="F:CommandLine.Core.Specification.conversionType">
            <summary>
            This information is denormalized to decouple Specification from PropertyInfo.
            </summary>
        </member>
        <member name="T:CommandLine.ErrorType">
            <summary>
            Discriminator enumeration of <see cref="T:CommandLine.Error"/> derivates.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadFormatTokenError">
            <summary>
            Value of <see cref="T:CommandLine.BadFormatTokenError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MissingValueOptionError">
            <summary>
            Value of <see cref="T:CommandLine.MissingValueOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.UnknownOptionError">
            <summary>
            Value of <see cref="T:CommandLine.UnknownOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MissingRequiredOptionError">
            <summary>
            Value of <see cref="T:CommandLine.MissingRequiredOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MutuallyExclusiveSetError">
            <summary>
            Value of <see cref="T:CommandLine.MutuallyExclusiveSetError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadFormatConversionError">
            <summary>
            Value of <see cref="T:CommandLine.BadFormatConversionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.SequenceOutOfRangeError">
            <summary>
            Value of <see cref="T:CommandLine.SequenceOutOfRangeError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.NoVerbSelectedError">
            <summary>
            Value of <see cref="T:CommandLine.NoVerbSelectedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadVerbSelectedError">
            <summary>
            Value of <see cref="T:CommandLine.BadVerbSelectedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.HelpRequestedError">
            <summary>
            Value of <see cref="T:CommandLine.HelpRequestedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.HelpVerbRequestedError">
            <summary>
            Value of <see cref="T:CommandLine.HelpVerbRequestedError"/> type.
            </summary>
        </member>
        <member name="T:CommandLine.Error">
            <summary>
            Base type of all errors.
            </summary>
            <remarks>All errors are defined within the system. There's no reason to create custom derivate types.</remarks>
        </member>
        <member name="M:CommandLine.Error.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.Error.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.Error.Equals(CommandLine.Error)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.Error"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.Error"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.Error"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="P:CommandLine.Error.Tag">
            <summary>
            Error type discriminator, defined as <see cref="T:CommandLine.ErrorType"/> enumeration.
            </summary>
        </member>
        <member name="T:CommandLine.TokenError">
            <summary>
            Base type of all errors related to bad token detection.
            </summary>
        </member>
        <member name="M:CommandLine.TokenError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.TokenError.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.TokenError.Equals(CommandLine.TokenError)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.TokenError"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.TokenError"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.TokenError"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="P:CommandLine.TokenError.Token">
            <summary>
            The string containing the token text.
            </summary>
        </member>
        <member name="T:CommandLine.BadFormatTokenError">
            <summary>
            Models an error generated when an invalid token is detected.
            </summary>
        </member>
        <member name="T:CommandLine.NamedError">
            <summary>
            Base type of all erros with name information.
            </summary>
        </member>
        <member name="M:CommandLine.NamedError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.NamedError.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.NamedError.Equals(CommandLine.NamedError)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.NamedError"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.NamedError"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.NamedError"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="P:CommandLine.NamedError.NameInfo">
            <summary>
            Name information relative to this error instance.
            </summary>
        </member>
        <member name="T:CommandLine.MissingValueOptionError">
            <summary>
            Models an error generated when an option lacks its value.
            </summary>
        </member>
        <member name="T:CommandLine.UnknownOptionError">
            <summary>
            Models an error generated when an unknown option is detected.
            </summary>
        </member>
        <member name="T:CommandLine.MissingRequiredOptionError">
            <summary>
            Models an error generated when a required option is required.
            </summary>
        </member>
        <member name="T:CommandLine.MutuallyExclusiveSetError">
            <summary>
            Models an error generated when a an option from another set is defined.
            </summary>
        </member>
        <member name="T:CommandLine.BadFormatConversionError">
            <summary>
            Models an error generated when a value conversion fails.
            </summary>
        </member>
        <member name="T:CommandLine.SequenceOutOfRangeError">
            <summary>
            Models an error generated when a sequence value lacks elements.
            </summary>
        </member>
        <member name="T:CommandLine.BadVerbSelectedError">
            <summary>
            Models an error generated when an unknown verb is detected.
            </summary>
        </member>
        <member name="T:CommandLine.HelpRequestedError">
            <summary>
            Models an error generated when a user explicit requests help.
            </summary>
        </member>
        <member name="T:CommandLine.HelpVerbRequestedError">
            <summary>
            Models an error generated when a user explicit requests help in verb commands scenario.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Verb">
            <summary>
            Verb command string.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Type">
            <summary>
            <see cref="T:System.Type"/> of verb command.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Matched">
            <summary>
            <value>true</value> if verb command is found; otherwise <value>false</value>.
            </summary>
        </member>
        <member name="T:CommandLine.NoVerbSelectedError">
            <summary>
            Models an error generated when no verb is selected.
            </summary>
        </member>
        <member name="T:CommandLine.OptionAttribute">
            <summary>
            Models an option specification.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="P:CommandLine.OptionAttribute.LongName">
            <summary>
            Gets long name of this command line option. This name is usually a single english word.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.ShortName">
            <summary>
            Gets a short name of this command line option, made of one character.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a command line option is required.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.SetName">
            <summary>
            Gets or sets the option's mutually exclusive set name.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.Min">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the lower range of items.
            </summary>
            <remarks>If not set, no lower range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.OptionAttribute.Max">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the upper range of items.
            </summary>
            <remarks>If not set, no upper range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.OptionAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.MetaValue">
            <summary>
            Gets or sets mapped property meta value. Usually an uppercase hint of required value type.
            </summary>
        </member>
        <member name="T:CommandLine.Parser">
            <summary>
            Provides methods to parse command line arguments.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor(System.Action{CommandLine.ParserSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class,
            configurable with <see cref="T:CommandLine.ParserSettings"/> using a delegate.
            </summary>
            <param name="configuration">The <see cref="T:System.Action`1"/> delegate used to configure
            aspects and behaviors of the parser.</param>
        </member>
        <member name="M:CommandLine.Parser.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments``1(System.String[])">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing an instance of type <typeparamref name="T"/> with parsed values
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments``1(System.Func{``0},System.String[])">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="factory">A <see cref="T:System.Func`1"/> delegate used to intitalize the target instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing an instance of type <typeparamref name="T"/> with parsed values
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments(System.String[],System.Type[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from the array of types supplied by <paramref name="types"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <param name="types">A <see cref="T:System.Type"/> array used to supply verb alternatives.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
            <remarks>All types must expose a parameterless constructor. It's stronly recommended to use a generic overload.</remarks>
        </member>
        <member name="M:CommandLine.Parser.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Default">
            <summary>
            Gets the singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Settings">
            <summary>
            Gets the instance that implements <see cref="T:CommandLine.ParserSettings"/> in use.
            </summary>
        </member>
        <member name="T:CommandLine.ParserExtensions">
            <summary>
            Defines generic overloads for <see cref="M:CommandLine.Parser.ParseArguments(System.String[],System.Type[])"/>.
            </summary>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``2(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``3(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``4(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``5(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``6(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``7(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``8(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``9(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``10(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``11(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``12(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``13(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``14(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``15(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <typeparam name="T15">The type of the fifteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``16(CommandLine.Parser,System.String[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <typeparam name="T15">The type of the fifteenth verb.</typeparam>
            <typeparam name="T16">The type of the sixteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="T:CommandLine.ParserResult`1">
            <summary>
            Models a parser result. It contains an instance of type <typeparamref name="T"/> with parsed values and
            a sequence of <see cref="T:CommandLine.Error"/>.
            </summary>
            <typeparam name="T">The type with attributes that define the syntax of parsing rules.</typeparam>
        </member>
        <member name="M:CommandLine.ParserResult`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.ParserResult`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.ParserResult`1.Equals(CommandLine.ParserResult{`0})">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.ParserResult`1"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.ParserResult`1"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.ParserResult`1"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="P:CommandLine.ParserResult`1.Value">
            <summary>
            Gets the instance with parsed values.
            </summary>
        </member>
        <member name="P:CommandLine.ParserResult`1.Errors">
            <summary>
            Gets the sequence of parsing errors.
            </summary>
        </member>
        <member name="T:CommandLine.ParserSettings">
            <summary>
            Provides settings for <see cref="T:CommandLine.Parser"/>. Once consumed cannot be reused.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CommandLine.ParserSettings"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons.
            Note that case insensitivity only applies to <i>parameters</i>, not the values
            assigned to them (for example, enum parsing).
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.ParsingCulture">
            <summary>
            Gets or sets the culture used when parsing arguments to typed properties.
            </summary>
            <remarks>
            Default is invariant culture, <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="P:CommandLine.ParserSettings.HelpWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> used for help method output.
            Setting this property to null, will disable help screen.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
            <c>true</c> to allow parsing the arguments with different class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="P:CommandLine.ParserSettings.EnableDashDash">
            <summary>
            Gets or sets a value indicating whether enable double dash '--' syntax,
            that forces parsing of all subsequent tokens as values.
            </summary>
        </member>
        <member name="T:CommandLine.Text.AssemblyLicenseAttribute">
            <summary>
            Models a multiline assembly license text.
            </summary>
        </member>
        <member name="T:CommandLine.Text.MultilineTextAttribute">
            <summary>
            Provides base properties for creating an attribute, used to define multiple lines of text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in derived type
            using one line of text.
            </summary>
            <param name="line1">The first line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in  type
            using two lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in  type
            using three lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in type
            using four lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in type
            using five lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
            <param name="line5">The fifth line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.GetLastLineWithText(System.String[])">
            <summary>
            Returns the last line with text. Preserves blank lines if user intended by skipping a line.
            </summary>
            <returns>The last index of line of the non-blank line.
            </returns>
            <param name='value'>The string array to process.</param>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Value">
            <summary>
            Gets the all non-blank lines as string.
            </summary>
            <value>A string of all non-blank lines.</value>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line1">
            <summary>
            Gets the first line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line2">
            <summary>
            Gets the second line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line3">
            <summary>
            Gets third line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line4">
            <summary>
            Gets the fourth line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line5">
            <summary>
            Gets the fifth line of text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
            <param name="line5">Fifth line of license text.</param>
        </member>
        <member name="T:CommandLine.Text.AssemblyUsageAttribute">
            <summary>
            Models a multiline assembly usage text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
            <param name="line5">Fifth line of usage text.</param>
        </member>
        <member name="T:CommandLine.Text.CopyrightInfo">
            <summary>
            Models the copyright part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and year.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="year">The year of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and copyrightYears.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Boolean,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying symbol case, author and copyrightYears.
            </summary>
            <param name="isSymbolUpper">The case of the copyright symbol.</param>
            <param name="author">The company or person holding the copyright.</param>
            <param name="copyrightYears">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="copyrightYears"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Reflection.AssemblyCopyrightAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            with an assembly attribute, this overrides all formatting.
            </summary>
            <param name="attribute">The attribute which text to use.</param>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.op_Implicit(CommandLine.Text.CopyrightInfo)~System.String">
            <summary>
            Converts the copyright instance to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the copyright.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.ToString">
            <summary>
            Returns the copyright as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the copyright.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.FormatYears(System.Int32[])">
            <summary>
            When overridden in a derived class, allows to specify a new algorithm to render copyright copyrightYears
            as a <see cref="T:System.String"/> instance.
            </summary>
            <param name="years">A <see cref="T:System.Int32"/> array of copyrightYears.</param>
            <returns>A <see cref="T:System.String"/> instance with copyright copyrightYears.</returns>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.Default">
            <summary>
            Gets the default copyright information.
            Retrieved from <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>, if it exists,
            otherwise it uses <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> as copyright holder with the current year.
            If neither exists it throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.CopyrightWord">
            <summary>
            Gets a different copyright word when overridden in a derived class.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HeadingInfo">
            <summary>
            Models the heading part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name.
            </summary>
            <param name="programName">The name of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name and version.
            </summary>
            <param name="programName">The name of the program.</param>
            <param name="version">The version of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.op_Implicit(CommandLine.Text.HeadingInfo)~System.String">
            <summary>
            Converts the heading to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HeadingInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the heading.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.ToString">
            <summary>
            Returns the heading as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the heading.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String,System.IO.TextWriter)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <param name="writer">The target <see cref="T:System.IO.TextWriter"/> derived type.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard output stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteError(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard error stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="P:CommandLine.Text.HeadingInfo.Default">
            <summary>
            Gets the default heading instance.
            The title is retrieved from <see cref="T:System.Reflection.AssemblyTitleAttribute"/>,
            or the assembly short name if its not defined.
            The version is retrieved from <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>,
            or the assembly version if its not defined.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HelpText">
            <summary>
            Provides means to format an help screen.
            You can assign it in place of a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class 
            specifying the sentence builder.
            </summary>
            <param name="sentenceBuilder">
            A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading string.
            </summary>
            <param name="heading">An heading string or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="heading"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying the sentence builder and heading string.
            </summary>
            <param name="sentenceBuilder">A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright strings.
            </summary>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more parameters are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright strings.
            </summary>
            <param name="sentenceBuilder">A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more parameters are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Text.HelpText,CommandLine.Text.HelpText},System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="parserResult">The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="onError">A delegate used to customize the text block of reporting parsing errors text block.</param>
            <param name="verbsIndex">If true the output style is consistent with verb commands (no dashes), otherwise it outputs options.</param>
            <remarks>The parameter <paramref name="verbsIndex"/> is not ontly a metter of formatting, it controls whether to handle verbs or options.</remarks>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild``1(CommandLine.ParserResult{``0})">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class,
            automatically handling verbs or options scenario.
            </summary>
            <param name="parserResult">The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <remarks>This feature is meant to be invoked automatically by the parser, setting the HelpWriter property
            of <see cref="T:CommandLine.ParserSettings"/>.</remarks>
        </member>
        <member name="M:CommandLine.Text.HelpText.DefaultParsingErrorsHandler``1(CommandLine.ParserResult{``0},CommandLine.Text.HelpText)">
            <summary>
            Supplies a default parsing error handler implementation.
            </summary>
            <param name="parserResult">The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="current">The <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.op_Implicit(CommandLine.Text.HelpText)~System.String">
            <summary>
            Converts the help instance to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the help screen.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsLine(System.String)">
            <summary>
            Adds a text line after copyright and before options usage strings.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsLine(System.String)">
            <summary>
            Adds a text line at the bottom, after options usage string.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions``1(``0)">
            <summary>
            Adds a text block with options usage string.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddVerbs(System.Type[])">
            <summary>
            Adds a text block with verbs usage string.
            </summary>
            <param name="types">The array of <see cref="T:System.Type"/> with verb commands.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="types"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions``1(System.Int32,``0)">
            <summary>
            Adds a text block with options usage string.
            </summary>
            <param name="maximumLength">The maximum length of the help screen.</param>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:CommandLine.Parser"/> class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>    
        </member>
        <member name="M:CommandLine.Text.HelpText.AddVerbs(System.Int32,System.Type[])">
            <summary>
            Adds a text block with verbs usage string.
            </summary>
            <param name="maximumLength">The maximum length of the help screen.</param>
            <param name="types">The array of <see cref="T:System.Type"/> with verb commands.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="types"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderParsingErrorsText``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Error,System.String},System.Int32)">
            <summary>
            Builds a string that contains a parsing error message.
            </summary>
            <param name="parserResult">The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="formatError">The error formatting delegate.</param>
            <param name="indent">Number of spaces used to indent text.</param>
            <returns>The <see cref="T:System.String"/> that contains the parsing error message.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.ToString">
            <summary>
            Returns the help screen as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the help screen.</returns>
        </member>
        <member name="P:CommandLine.Text.HelpText.Heading">
            <summary>
            Gets or sets the heading string.
            You can directly assign a <see cref="T:CommandLine.Text.HeadingInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Copyright">
            <summary>
            Gets or sets the copyright string.
            You can directly assign a <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.MaximumDisplayWidth">
            <summary>
            Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
            <value>The maximum width of the display.</value>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddDashesToOption">
            <summary>
            Gets or sets a value indicating whether the format of options should contain dashes.
            It modifies behavior of <see cref="M:CommandLine.Text.HelpText.AddOptions``1(``0)"/> method.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AdditionalNewLineAfterOption">
            <summary>
            Gets or sets a value indicating whether to add an additional line after the description of the option.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddEnumValuesToHelpText">
            <summary>
            Gets or sets a value indicating whether to add the values of an enum after the description of the option.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.SentenceBuilder">
            <summary>
            Gets the <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance specified in constructor.
            </summary>
        </member>
        <member name="T:CommandLine.Text.SentenceBuilder">
            <summary>
            Exposes standard delegates to provide a mean to customize part of help screen generation.
            This type is consumed by <see cref="T:CommandLine.Text.HelpText"/>.
            </summary>
        </member>
        <member name="M:CommandLine.Text.SentenceBuilder.CreateDefault">
            <summary>
            Create the default instance of <see cref="T:CommandLine.Text.SentenceBuilder"/>,
            localized in English.
            </summary>
            <returns>The default <see cref="T:CommandLine.Text.SentenceBuilder"/> instance.</returns>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.RequiredWord">
            <summary>
            Gets a delegate that returns the word 'required'.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a delegate that returns that error heading text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.HelpCommandText">
            <summary>
            Get a delegate that returns the help text of helo command.
            The delegates should accept a boolean that is equal <value>true</value> for options; otherwise <value>false</value> for verbs.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.FormatError">
            <summary>
            Gets a delegate that handle singular error formatting.
            The delegates should accept an <see cref="T:CommandLine.Error"/> instance as input.
            </summary>
        </member>
        <member name="T:CommandLine.ValueAttribute">
            <summary>
            Models an value specification, or better how to handle values not bound to options.
            </summary>
        </member>
        <member name="M:CommandLine.ValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ValueAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommandLine.ValueAttribute.Index">
            <summary>
            Gets the position this option has on the command line.
            </summary>
        </member>
        <member name="P:CommandLine.ValueAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a command line option is required.
            </summary>
        </member>
        <member name="P:CommandLine.ValueAttribute.Min">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the lower range of items.
            </summary>
            <remarks>If not set, no lower range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.ValueAttribute.Max">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the upper range of items.
            </summary>
            <remarks>If not set, no upper range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.ValueAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="T:CommandLine.VerbAttribute">
            <summary>
            Models a verb command specification.
            </summary>
        </member>
        <member name="M:CommandLine.VerbAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.VerbAttribute"/> class.
            </summary>
            <param name="name">The long name of the verb command.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is null, empty or whitespace.</exception>
        </member>
        <member name="P:CommandLine.VerbAttribute.Name">
            <summary>
            Gets the verb name.
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary. 
            </summary>
        </member>
    </members>
</doc>
